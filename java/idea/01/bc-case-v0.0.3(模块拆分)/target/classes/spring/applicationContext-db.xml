<?xml version="1.0" encoding="UTF-8"?>
<!--suppress SpringFacetInspection -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.1.xsd
          http://www.springframework.org/schema/aop
          http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
          http://www.springframework.org/schema/tx
          http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
          http://www.springframework.org/schema/cache
          http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
          http://www.springframework.org/schema/data/jpa
          http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <!-- 配置自动扫描的包 -->
    <!--<context:component-scan base-package="com"></context:component-scan>-->

    <!--&lt;!&ndash; 1. C3P0 配置数据源 连接池配置 &ndash;&gt;-->
    <!--<context:property-placeholder location="classpath:jdbc.properties"/>   -->

    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <!--<property name="driverClass" value="${jdbc_driver}"/>-->
    <!--<property name="jdbcUrl" value="${jdbc_url}"/>-->
    <!--<property name="user" value="${jdbc_username}"/>-->
    <!--<property name="password" value="${jdbc_password}"/>-->

    <!--&lt;!&ndash;连接池中保留的最大连接数。默认值: 15 &ndash;&gt;-->
    <!--<property name="maxPoolSize" value="20"/>-->
    <!--&lt;!&ndash; 连接池中保留的最小连接数，默认为：3&ndash;&gt;-->
    <!--<property name="minPoolSize" value="2"/>-->
    <!--&lt;!&ndash; 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3&ndash;&gt;-->
    <!--<property name="initialPoolSize" value="2"/>-->

    <!--&lt;!&ndash;最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 &ndash;&gt;-->
    <!--<property name="maxIdleTime" value="60"/>-->

    <!--&lt;!&ndash; 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 &ndash;&gt;-->
    <!--<property name="checkoutTimeout" value="3000"/>-->

    <!--&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 &ndash;&gt;-->
    <!--<property name="acquireIncrement" value="2"/>-->

    <!--&lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次&ndash;&gt;-->
    <!--<property name="acquireRetryAttempts" value="0"/>-->

    <!--&lt;!&ndash;重新尝试的时间间隔，默认为：1000毫秒&ndash;&gt;-->
    <!--<property name="acquireRetryDelay" value="1000"/>-->

    <!--&lt;!&ndash;关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 &ndash;&gt;-->
    <!--<property name="autoCommitOnClose" value="false"/>-->

    <!--&lt;!&ndash;c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null &ndash;&gt;-->
    <!--<property name="automaticTestTable" value="Test"/>-->

    <!--&lt;!&ndash;如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false&ndash;&gt;-->
    <!--<property name="breakAfterAcquireFailure" value="false"/>-->

    <!--&lt;!&ndash;每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 &ndash;&gt;-->
    <!--<property name="idleConnectionTestPeriod" value="60"/>-->
    <!--&lt;!&ndash;c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0&ndash;&gt;-->
    <!--<property name="maxStatements" value="100"/>-->
    <!--&lt;!&ndash;maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 &ndash;&gt;-->
    <!--<property name="maxStatementsPerConnection" value="10"/>-->
    <!--</bean>-->


    <!-- BoneCP配置数据源连接池-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="0"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:jdbc.xml</value>
                <!--<value>file:${catalina.home}/jdbc.xml</value>-->
            </list>
        </property>
    </bean>


    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="driverClass" value="${BoneCP.driverClass}"/>
        <property name="jdbcUrl" value="${BoneCP.jdbcUrl}"/>
        <property name="username" value="${BoneCP.username}"/>
        <property name="password" value="${BoneCP.password}"/>

        <!-- 每个分区最大的连接数 -->
        <property name="maxConnectionsPerPartition" value="${BoneCP.maxConnectionsPerPartition}"/>
        <!-- 每个分区最小的连接数 -->
        <property name="minConnectionsPerPartition" value="${BoneCP.minConnectionsPerPartition}"/>
        <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->
        <property name="partitionCount" value="${BoneCP.partitionCount}"/>
        <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
        <property name="acquireIncrement" value="${BoneCP.acquireIncrement}"/>
        <!-- 缓存prepared statements的大小，默认值：0 -->
        <property name="statementsCacheSize" value="${BoneCP.statementsCacheSize}"/>
        <!-- 数据库在获取连接时使用的验证sql -->
        <property name="initSQL" value="${BoneCP.initSQL}"/>
        <!-- 打印SQL -->
        <property name="logStatementsEnabled" value="${BoneCP.logStatementsEnabled}"/>
    </bean>


    <!-- 2. 配置 JPA 的 EntityManagerFactory -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="jpaVendorAdapter"> <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean> </property>
        <property name="packagesToScan" value="com"></property>
        <property name="jpaProperties">
            <props>
                <!-- 生成的数据表的列的映射策略 -->
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>

                <!-- hibernate 基本属性 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- 3. 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"></property>
    </bean>

    <!-- 4. 配置支持注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 5. 配置 SpringData -->
    <!-- 加入 jpa 的命名空间 -->
    <!-- base-package: 扫描 Repository Bean <dao> 所在的 package -->
    <jpa:repositories base-package="com.bc.**.dao" entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>
</beans>